// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SortedSet is an autogenerated mock type for the SortedSet type
type SortedSet struct {
	mock.Mock
}

// AddScoredMember provides a mock function with given fields: ctx, key, member, score
func (_m *SortedSet) AddScoredMember(ctx context.Context, key string, member string, score float64) (int64, error) {
	ret := _m.Called(ctx, key, member, score)

	if len(ret) == 0 {
		panic("no return value specified for AddScoredMember")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float64) (int64, error)); ok {
		return rf(ctx, key, member, score)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float64) int64); ok {
		r0 = rf(ctx, key, member, score)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, float64) error); ok {
		r1 = rf(ctx, key, member, score)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembersByScoreRange provides a mock function with given fields: ctx, key, minScore, maxScore
func (_m *SortedSet) GetMembersByScoreRange(ctx context.Context, key string, minScore string, maxScore string) ([]interface{}, []float64, error) {
	ret := _m.Called(ctx, key, minScore, maxScore)

	if len(ret) == 0 {
		panic("no return value specified for GetMembersByScoreRange")
	}

	var r0 []interface{}
	var r1 []float64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]interface{}, []float64, error)); ok {
		return rf(ctx, key, minScore, maxScore)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []interface{}); ok {
		r0 = rf(ctx, key, minScore, maxScore)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) []float64); ok {
		r1 = rf(ctx, key, minScore, maxScore)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]float64)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(ctx, key, minScore, maxScore)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveMembersByScoreRange provides a mock function with given fields: ctx, key, minScore, maxScore
func (_m *SortedSet) RemoveMembersByScoreRange(ctx context.Context, key string, minScore string, maxScore string) (int64, error) {
	ret := _m.Called(ctx, key, minScore, maxScore)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMembersByScoreRange")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (int64, error)); ok {
		return rf(ctx, key, minScore, maxScore)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) int64); ok {
		r0 = rf(ctx, key, minScore, maxScore)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, key, minScore, maxScore)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSortedSet creates a new instance of SortedSet. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSortedSet(t interface {
	mock.TestingT
	Cleanup(func())
}) *SortedSet {
	mock := &SortedSet{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
