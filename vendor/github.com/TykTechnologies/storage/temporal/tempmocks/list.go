// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// List is an autogenerated mock type for the List type
type List struct {
	mock.Mock
}

// Append provides a mock function with given fields: ctx, pipelined, key, values
func (_m *List) Append(ctx context.Context, pipelined bool, key string, values ...[]byte) error {
	_va := make([]interface{}, len(values))
	for _i := range values {
		_va[_i] = values[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pipelined, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool, string, ...[]byte) error); ok {
		r0 = rf(ctx, pipelined, key, values...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Length provides a mock function with given fields: ctx, key
func (_m *List) Length(ctx context.Context, key string) (int64, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Length")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pop provides a mock function with given fields: ctx, key, stop
func (_m *List) Pop(ctx context.Context, key string, stop int64) ([]string, error) {
	ret := _m.Called(ctx, key, stop)

	if len(ret) == 0 {
		panic("no return value specified for Pop")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) ([]string, error)); ok {
		return rf(ctx, key, stop)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) []string); ok {
		r0 = rf(ctx, key, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, key, stop)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Prepend provides a mock function with given fields: ctx, pipelined, key, values
func (_m *List) Prepend(ctx context.Context, pipelined bool, key string, values ...[]byte) error {
	_va := make([]interface{}, len(values))
	for _i := range values {
		_va[_i] = values[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pipelined, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Prepend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool, string, ...[]byte) error); ok {
		r0 = rf(ctx, pipelined, key, values...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Range provides a mock function with given fields: ctx, key, start, stop
func (_m *List) Range(ctx context.Context, key string, start int64, stop int64) ([]string, error) {
	ret := _m.Called(ctx, key, start, stop)

	if len(ret) == 0 {
		panic("no return value specified for Range")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) ([]string, error)); ok {
		return rf(ctx, key, start, stop)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) []string); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, int64) error); ok {
		r1 = rf(ctx, key, start, stop)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, key, count, element
func (_m *List) Remove(ctx context.Context, key string, count int64, element interface{}) (int64, error) {
	ret := _m.Called(ctx, key, count, element)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, interface{}) (int64, error)); ok {
		return rf(ctx, key, count, element)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, interface{}) int64); ok {
		r0 = rf(ctx, key, count, element)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, interface{}) error); ok {
		r1 = rf(ctx, key, count, element)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewList creates a new instance of List. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewList(t interface {
	mock.TestingT
	Cleanup(func())
}) *List {
	mock := &List{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
